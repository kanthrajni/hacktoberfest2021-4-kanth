def calcRedundantBits(m):
    for i in range(m):
        if(2**i >= m + i + 1):
            return i
 
def posRedundantBits(data, r):
    j = 0
    k = 1
    m = len(data)
    res = ''
    for i in range(1, m + r+1):
        if(i == 2**j):
            res = res + '0'
            j += 1
        else:
            res = res + data[-1 * k]
            k += 1
    return res[::-1]
 
def calcParityBits(arr, r):
    n = len(arr)
    for i in range(r):
        val = 0
        for j in range(1, n + 1):
            if(j & (2**i) == (2**i)):
                val = val ^ int(arr[-1 * j])
        arr = arr[:n-(2**i)] + str(val) + arr[n-(2**i)+1:]
    return arr

def detectError(hc,receive):
    k=0
    for i in range(len(hc)):
        if(hc[i]!=receive[i]):
            if(k==0):
                k=1
                print('Error at bit position',i+1,end='')
            else:
                print(',',i+1,end='')
    if(k==0):
        print('No error!!')
    else:
        print()

while(True):
    sent = input('Enter sent data : ')
    m = len(sent)
    r = calcRedundantBits(m)
    hc = posRedundantBits(sent, r)
    hc = calcParityBits(hc, r)
    print('Data transferred is',hc) 
    receive = input('Enter received data. ')
    detectError(hc,receive)
    ch=input('Enter y to continue or n to end. ')
    if(ch=='n'):
        break
